local store = require 'scripts/store'

local function create_toolbar()
	-- Create a new GUI file called toolbar.gui or add to game.gui

	-- Toolbar background
	local background = gui.new_box_node(vmath.vector3(360, 100, 0), vmath.vector3(720, 200, 0))
	gui.set_color(background, vmath.vector4(0.1, 0.1, 0.1, 0.8)) -- Dark semi-transparent background

	-- Store button
	local store_button = gui.new_box_node(vmath.vector3(180, 100, 0), vmath.vector3(150, 150, 0))
	gui.set_id(store_button, "store_button")
	gui.set_color(store_button, vmath.vector4(0.2, 0.2, 0.3, 1))

	local store_text = gui.new_text_node(vmath.vector3(180, 100, 0), "Store")
	gui.set_id(store_text, "store_text")
	gui.set_color(store_text, vmath.vector4(1, 1, 1, 1))

	-- Stats button
	local stats_button = gui.new_box_node(vmath.vector3(360, 100, 0), vmath.vector3(150, 150, 0))
	gui.set_id(stats_button, "stats_button")
	gui.set_color(stats_button, vmath.vector4(0.2, 0.3, 0.2, 1))

	local stats_text = gui.new_text_node(vmath.vector3(360, 100, 0), "Stats")
	gui.set_id(stats_text, "stats_text")
	gui.set_color(stats_text, vmath.vector4(1, 1, 1, 1))

	-- Ads button
	local ads_button = gui.new_box_node(vmath.vector3(540, 100, 0), vmath.vector3(150, 150, 0))
	gui.set_id(ads_button, "ads_button")
	gui.set_color(ads_button, vmath.vector4(0.3, 0.2, 0.2, 1))

	local ads_text = gui.new_text_node(vmath.vector3(540, 100, 0), "Boost")
	gui.set_id(ads_text, "ads_text")
	gui.set_color(ads_text, vmath.vector4(1, 1, 1, 1))
end

local function create_overlay(self)
	-- Create semi-transparent overlay
	self.overlay = gui.new_box_node(vmath.vector3(360, 640, 0), vmath.vector3(720, 1280, 0))
	gui.set_color(self.overlay, vmath.vector4(0, 0, 0, 0.7))

	-- Close button
	self.close_button = gui.new_text_node(vmath.vector3(650, 1150, 0), "X")
	gui.set_color(self.close_button, vmath.vector4(1, 1, 1, 1))
end

function init(self)
	msg.post(".", "acquire_input_focus")
	create_toolbar()
	self.energy_node = gui.get_node("energy_counter")
	self.eps_node = gui.get_node("passive_eps")
	self.click_mult_node = gui.get_node("click_multiplier")
	self.passive_mult_node = gui.get_node("passive_multiplier")
	-- self.particle_node = gui.get_node("central_particle")

	-- Inicializar texto
	gui.set_text(self.energy_node, "0")
	gui.set_text(self.eps_node, "0/s")
	gui.set_text(self.click_mult_node, "Click: 1.0x")
	gui.set_text(self.passive_mult_node, "Passive: 1.0x")
	-- Uncomment this to check the actual url of the component.
	-- local url = msg.url()
	-- print("URL of this script: ", url)

	-- Get references to all button nodes
	self.store_button = gui.get_node("store_button")
	self.store_text = gui.get_node("store_text")
	self.stats_button = gui.get_node("stats_button")
	self.stats_text = gui.get_node("stats_text")
	self.ads_button = gui.get_node("ads_button")
	self.ads_text = gui.get_node("ads_text")

	-- Store active state
	self.active_menu = nil
	self.menu_title = nil
	self.store_items_nodes = {}
end

local function format_energy(value)
	-- Formatear n√∫meros grandes (1K, 1M, 1B, etc.)
	if value < 1000 then
		return string.format("%d", value)
	elseif value < 1000000 then
		return string.format("%.1fK", value/1000)
	elseif value < 1000000000 then
		return string.format("%.1fM", value/1000000)
	elseif value < 1000000000000 then
		return string.format("%.1fB", value/1000000000)
	else
		return string.format("%.1e", value)
	end
end

local function create_tap_effect(position, energy_per_click)
	local node = gui.new_text_node(vmath.vector3(position.x, position.y, 0), "+" .. tostring(energy_per_click))
	gui.set_color(node, vmath.vector4(1, 1, 0, 1)) -- Yellow text
	gui.set_font(node, "main") -- You'll need to create a font resource

	-- Animate the text to float up and fade out
	gui.animate(node, "position.y", position.y + 100, gui.EASING_OUTSINE, 1.5)
	gui.animate(node, "color.w", 0, gui.EASING_INSINE, 1.5, 0, function()
		gui.delete_node(node)
	end)

	-- Optional: Add a scale pulse effect to the planet
	-- gui.animate(self.planet_node, "scale", vmath.vector3(1.1, 1.1, 1), gui.EASING_OUTSINE, 0.1)
	-- gui.animate(self.planet_node, "scale", vmath.vector3(1, 1, 1), gui.EASING_INSINE, 0.1, 0.1)
end

local function create_store_item(self, item, index)
	local y_position = 800 - ((index - 1) * 180) -- Space items vertically
	self.store_item_nodes = self.store_item_nodes or {}
	-- Create item background
	local item_bg = gui.new_box_node(vmath.vector3(360, y_position, 0), vmath.vector3(600, 150, 0))
	gui.set_color(item_bg, vmath.vector4(0.2, 0.2, 0.3, 1))
	gui.set_id(item_bg, "store_item_" .. index)
	table.insert(self.store_item_nodes,item_bg)
	-- Item name
	local name_text = gui.new_text_node(vmath.vector3(200, y_position + 40, 0), item.name)
	gui.set_color(name_text, vmath.vector4(1, 1, 1, 1))
	gui.set_font(name_text, hash("main"))
	table.insert(self.store_item_nodes, name_text)
	
	-- Item description
	local desc_text = gui.new_text_node(vmath.vector3(200, y_position, 0), item.description)
	gui.set_color(desc_text, vmath.vector4(0.8, 0.8, 0.8, 1))
	gui.set_font(desc_text, hash("main"))
	table.insert(self.store_item_nodes, desc_text)
	
	-- Item cost
	local cost_text = gui.new_text_node(vmath.vector3(200, y_position - 40, 0), "Cost: " .. format_energy(item.cost))
	gui.set_color(cost_text, vmath.vector4(1, 1, 0, 1))
	gui.set_font(cost_text, hash("main"))
	table.insert(self.store_item_nodes, cost_text)
	
	-- Buy button
	local buy_button = gui.new_box_node(vmath.vector3(520, y_position, 0), vmath.vector3(120, 60, 0))
	gui.set_color(buy_button, vmath.vector4(0.3, 0.6, 0.3, 1))
	gui.set_id(buy_button, "buy_button_" .. index)
	table.insert(self.store_item_nodes, buy_button)

	local buy_text = gui.new_text_node(vmath.vector3(520, y_position, 0), "BUY")
	gui.set_color(buy_text, vmath.vector4(1, 1, 1, 1))
	gui.set_id(buy_text, "buy_text_" .. index)
	table.insert(self.store_item_nodes, buy_text)
	
	-- Store references for later interaction
	self.store_items = self.store_items or {}
	self.store_items[index] = {
		bg = item_bg,
		name = name_text,
		desc = desc_text,
		cost = cost_text,
		button = buy_button,
		button_text = buy_text,
		item_data = item
	}
end

local function open_store(self)
	self.active_menu = "store"
	-- Visual feedback
	gui.animate(self.store_button, "color", vmath.vector4(0.3, 0.3, 0.5, 1), gui.EASING_OUTSINE, 0.2)
	gui.animate(self.store_button, "color", vmath.vector4(0.2, 0.2, 0.3, 1), gui.EASING_INSINE, 0.2, 0.2)
	create_overlay(self)
	self.menu_title = gui.new_text_node(vmath.vector3(360, 1000, 0), "STORE")
	gui.set_color(self.menu_title, vmath.vector4(1, 1, 1, 1))
	-- Create store items
	for i, item in ipairs(store.items) do
		create_store_item(self, item, i)
	end
end

local function hide_active_menu(self)
	-- Remove overlay and menu elements
	if self.overlay then gui.delete_node(self.overlay) end
	if self.close_button then gui.delete_node(self.close_button) end
	if self.menu_title then gui.delete_node(self.menu_title) end

	-- Clean up store item nodes if they exist
	if self.store_item_nodes then
		for _, node in ipairs(self.store_item_nodes) do
			gui.delete_node(node)
		end
		self.store_item_nodes = {}
	end

	-- Remove any other menu elements
	self.active_menu = nil
end

local function open_stats(self)
	
	-- Visual feedback
	gui.animate(self.stats_button, "color", vmath.vector4(0.3, 0.5, 0.3, 1), gui.EASING_OUTSINE, 0.2)
	gui.animate(self.stats_button, "color", vmath.vector4(0.2, 0.3, 0.2, 1), gui.EASING_INSINE, 0.2, 0.2)

	create_overlay(self)
	self.menu_title = gui.new_text_node(vmath.vector3(360, 1000, 0), "STATISTICS")
	gui.set_color(self.menu_title, vmath.vector4(1, 1, 1, 1))
	-- -- Display stats
	-- local y_pos = 900
	-- for key, value in pairs(stats_data) do
	-- 	local stat_text = gui.new_text_node(vmath.vector3(360, y_pos, 0), key .. ": " .. value)
	-- 	gui.set_color(stat_text, vmath.vector4(1, 1, 1, 1))
	-- 	y_pos = y_pos - 50
	-- end

	self.active_menu = "stats"
end

local function show_ads_options(self)

	-- Visual feedback
	gui.animate(self.ads_button, "color", vmath.vector4(0.5, 0.3, 0.3, 1), gui.EASING_OUTSINE, 0.2)
	gui.animate(self.ads_button, "color", vmath.vector4(0.3, 0.2, 0.2, 1), gui.EASING_INSINE, 0.2, 0.2)
	-- Create ads UI
	create_overlay(self)

	self.menu_title = gui.new_text_node(vmath.vector3(360, 1000, 0), "BOOSTS")
	gui.set_color(self.menu_title, vmath.vector4(1, 1, 1, 1))

	-- -- Create ad options
	-- for i, option in ipairs(ads_data.options) do
	-- 	self:create_ad_option(option, i)
	-- end

	self.active_menu = "ads"
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		-- Check if store button was clicked
		if gui.pick_node(self.store_button, action.x, action.y) then
			open_store(self)

			-- Check if stats button was clicked
		elseif gui.pick_node(self.stats_button, action.x, action.y) then
			open_stats(self)

			-- Check if ads button was clicked
		elseif gui.pick_node(self.ads_button, action.x, action.y) then
			show_ads_options(self)

		end
	end

	if self.active_menu and action_id == hash("touch") and action.pressed then
		if gui.pick_node(self.close_button, action.x, action.y) then
			hide_active_menu(self)
		end

		-- Handle store item purchases
		if self.active_menu == "store" and self.store_items then
			for index, item in pairs(self.store_items) do
				if gui.pick_node(item.button, action.x, action.y) then
					hide_active_menu(self)
					print("Purchased item!!")
					msg.post("/game#game", 'purchase_item', {item = item.item_data})
				end
			end
		end
	end
end

local function show_temporary_message(self, text)
	-- Create a temporary message node
	local message_node = gui.new_text_node(vmath.vector3(360, 250, 0), text)
	gui.set_color(message_node, vmath.vector4(1, 1, 1, 1))
	gui.set_font(message_node, "main") -- Use your game font

	-- Animate the message to fade in and out
	gui.set_scale(message_node, vmath.vector3(0.1, 0.1, 1))
	gui.animate(message_node, "scale", vmath.vector3(0.2, 0.2, 1), gui.EASING_OUTELASTIC, 0.5)

	gui.animate(message_node, "color.w", 0, gui.EASING_LINEAR, 3, 2, function()
		gui.delete_node(message_node)
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_energy") then
		-- Actualizar el contador de energ√≠a
		local formatted = format_energy(message.energy)
		gui.set_text(self.energy_node, formatted)

		local formatted_eps = format_energy(message.passive_eps) .. "/s"
		gui.set_text(self.eps_node, formatted_eps)

		-- Update multiplier displays if provided
		if message.click_multiplier then
			gui.set_text(self.click_mult_node, "Click: " .. message.click_multiplier .. "x")
		end

		if message.passive_multiplier then
			gui.set_text(self.passive_mult_node, "Passive: " .. message.passive_multiplier .. "x")
		end

	elseif message_id == hash("tap_effect") then
		-- Crear efecto visual al hacer tap
		create_tap_effect(message.position, message.energy_per_click)
	elseif message_id == hash("show_message") then
		show_temporary_message(self, message.text)
	end
end